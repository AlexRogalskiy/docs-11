<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:db="http://docbook.org/ns/docbook" xmlns:rx="http://www.renderx.com/XSL/Extensions" xmlns:xlink="http://www.w3.org/1999/xlink"><rx:meta-info><rx:meta-field name="author" value="&#10;        Michaela&#10;        Woods&#10;      "/><rx:meta-field name="creator" value="Kx Systems"/><rx:meta-field name="title" value="Data visualization with kdb+ using ODBC"/><rx:meta-field name="keywords" value="Kx, Kx Systems, kdb+, data, kdb+, ODBC, Tableau, visualization"/></rx:meta-info><rx:outline><rx:bookmark internal-destination="connecting-to-kdb-using-odbc"><rx:bookmark-label>Connecting to kdb+ using ODBC</rx:bookmark-label></rx:bookmark><rx:bookmark internal-destination="tableau-functionality-for-kdb"><rx:bookmark-label>Tableau functionality for kdb+</rx:bookmark-label></rx:bookmark><rx:bookmark internal-destination="publishing-to-tableau-server"><rx:bookmark-label>Publishing to Tableau Server</rx:bookmark-label></rx:bookmark><rx:bookmark internal-destination="conclusion"><rx:bookmark-label>Conclusion</rx:bookmark-label></rx:bookmark><rx:bookmark internal-destination="appendix-a"><rx:bookmark-label>Appendix A</rx:bookmark-label></rx:bookmark></rx:outline><fo:layout-master-set><fo:simple-page-master master-name="cover-page" page-width="8.5in" page-height="11in"><fo:region-body margin-top="0" margin-bottom="0" margin-left="0" margin-right="0" background-color="#eeeded"/></fo:simple-page-master><fo:simple-page-master master-name="toc" page-width="8.5in" page-height="11in" margin-top="30pt" margin-bottom="30pt" margin-left="45pt" margin-right="45pt"><fo:region-body margin-top="48pt" margin-bottom="32pt" margin-left="60pt" margin-right="60pt"/><fo:region-before extent="30pt"/><fo:region-after extent="30pt"/></fo:simple-page-master><fo:simple-page-master master-name="standard-page" page-width="8.5in" page-height="11in" margin-top="30pt" margin-bottom="30pt" margin-left="45pt" margin-right="45pt"><fo:region-body margin-top="48pt" margin-bottom="32pt" margin-left="40pt" margin-right="40pt"/><fo:region-before extent="30pt"/><fo:region-after extent="30pt"/></fo:simple-page-master></fo:layout-master-set><fo:page-sequence master-reference="cover-page" font-family="STIX2" initial-page-number="1" language="en" country="gb"><fo:flow flow-name="xsl-region-body"><fo:block-container absolute-position="absolute" top="0mm" right="0mm" width="2in" height="2in"><fo:block text-align="right"><fo:external-graphic src="url(/Users/sjt/Projects/kx/github/StephenTaylor-Kx/mkdocs2pdf/img/diamond-white.png)" content-width="40mm" scaling="uniform"/></fo:block></fo:block-container><fo:block-container absolute-position="absolute" bottom="0mm" left="0mm" width="2.5in" height="30mm"><fo:block><fo:external-graphic src="url(/Users/sjt/Projects/kx/github/StephenTaylor-Kx/mkdocs2pdf/img/diamond-bottom-left-white.png)" content-width="50mm" scaling="uniform"/></fo:block></fo:block-container><fo:block-container absolute-position="absolute" bottom="0mm" right="0mm" width="4in" height="50mm"><fo:block text-align="right"><fo:external-graphic src="url(/Users/sjt/Projects/kx/github/StephenTaylor-Kx/mkdocs2pdf/img/kx-cover.png)" content-width="75mm"/></fo:block></fo:block-container><fo:block-container absolute-position="absolute" top="35mm" left="15mm"><fo:block color="#0070cd" font-family="Proxima Nova" font-size="60pt" font-weight="bold" letter-spacing="-4pt">kx</fo:block></fo:block-container><fo:block-container absolute-position="absolute" top="40mm" left="40mm"><fo:block><fo:external-graphic src="url(/Users/sjt/Projects/kx/github/StephenTaylor-Kx/mkdocs2pdf/img/its-about-time.png)"/></fo:block></fo:block-container><fo:block-container absolute-position="absolute" top="80mm" left="35mm"><fo:block font-family="Proxima Nova" color="#0070cd" font-size="18pt" font-weight="400">
							Technical Whitepaper
						</fo:block><fo:block margin-top="9pt" margin-right="30mm" line-height="1.4" font-size="24pt" font-weight="400">Data visualization with kdb+ using ODBC</fo:block></fo:block-container><fo:block-container absolute-position="absolute" top="170mm" left="35mm"><fo:block line-height="16pt" font-weight="bold">Date</fo:block></fo:block-container><fo:block-container absolute-position="absolute" top="170mm" left="55mm" width="100mm"><fo:block line-height="16pt" text-align="left">July 2018</fo:block></fo:block-container><fo:block-container absolute-position="absolute" top="180mm" left="35mm"><fo:block line-height="16pt" font-weight="bold">Author</fo:block></fo:block-container><fo:block-container absolute-position="absolute" top="180mm" left="55mm" width="100mm"><fo:block line-height="16pt" text-align="left"><fo:block line-height="16pt" space-after="9pt" text-align="justify">
      Michaela Woods is a kdb+ consultant for Kx. Based in London for
      the past three years, she is now an industry leader in combining
      kdb+ with Tableau through her development of a data visualization
      platform currently used at one of the world’s leading investment
      banks.
    </fo:block></fo:block></fo:block-container><fo:block> </fo:block></fo:flow></fo:page-sequence><fo:page-sequence master-reference="toc" font-family="STIX2" language="en" country="gb"><fo:static-content flow-name="xsl-region-before"><fo:block text-align-last="justify" font-family="Proxima Nova" color="gray"><fo:inline font-size="9pt">Data visualization with kdb+ using ODBC</fo:inline><fo:leader leader-pattern="space"/><fo:inline color="#0070cd" font-size="18pt" font-weight="bold" letter-spacing="-2pt">kx</fo:inline></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after"><fo:block color="gray" text-align="right"><fo:inline font-family="Proxima Nova" font-size="9pt" letter-spacing="2pt"><fo:page-number/></fo:inline></fo:block></fo:static-content><fo:flow flow-name="xsl-region-body"><fo:block break-before="page"><fo:block font-size="14pt" text-align="center" margin-top="36pt" margin-bottom="36pt">Contents</fo:block><fo:block margin-bottom="6pt" text-align-last="justify"><fo:basic-link internal-destination="idm371384434272">Connecting to kdb+ using ODBC <fo:leader leader-pattern="dots"/> <fo:page-number-citation ref-id="idm371384434272"/></fo:basic-link></fo:block><fo:block margin-bottom="6pt" text-align-last="justify"><fo:basic-link internal-destination="idm371384409872">Tableau functionality for kdb+ <fo:leader leader-pattern="dots"/> <fo:page-number-citation ref-id="idm371384409872"/></fo:basic-link></fo:block><fo:block margin-bottom="6pt" text-align-last="justify"><fo:basic-link internal-destination="idm371384282480">Publishing to Tableau Server <fo:leader leader-pattern="dots"/> <fo:page-number-citation ref-id="idm371384282480"/></fo:basic-link></fo:block><fo:block margin-bottom="6pt" text-align-last="justify"><fo:basic-link internal-destination="idm371384260080">Conclusion <fo:leader leader-pattern="dots"/> <fo:page-number-citation ref-id="idm371384260080"/></fo:basic-link></fo:block><fo:block margin-bottom="6pt" text-align-last="justify"><fo:basic-link internal-destination="idm371384252592">Appendix A <fo:leader leader-pattern="dots"/> <fo:page-number-citation ref-id="idm371384252592"/></fo:basic-link></fo:block></fo:block></fo:flow></fo:page-sequence><fo:page-sequence master-reference="standard-page" font-family="STIX2" language="en" country="gb"><fo:static-content flow-name="xsl-region-before"><fo:block text-align-last="justify" font-family="Proxima Nova" color="gray"><fo:inline font-size="9pt">Data visualization with kdb+ using ODBC</fo:inline><fo:leader leader-pattern="space"/><fo:inline color="#0070cd" font-size="18pt" font-weight="bold" letter-spacing="-2pt">kx</fo:inline></fo:block></fo:static-content><fo:static-content flow-name="xsl-footnote-separator"><fo:block><fo:leader leader-pattern="rule" rule-thickness=".5pt" leader-length="50%"/></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after"><fo:block color="gray" text-align="right"><fo:inline font-family="Proxima Nova" font-size="9pt" letter-spacing="2pt"><fo:page-number/></fo:inline></fo:block></fo:static-content><fo:flow flow-name="xsl-region-body"><fo:block id="data-visualization-with-kdb-using-odbc-a-tableau-case-study">
  <fo:block id="idm371384528032" font-size="18pt" line-height="22pt" margin-right="36pt" page-break-before="always" space-after="60pt" text-align="left">Data visualization with kdb+ using ODBC: a Tableau case
  study</fo:block>
  <fo:block line-height="16pt" space-after="9pt" text-align="justify">
    Business intelligence (BI) tools are widely used across many
    industries for their interactive nature, which enables users to
    create and customize dynamic data visualizations easily. Kx provides
    its own visualization tool,
    <fo:basic-link external-destination="url('http://code.kx.com/q/platform')"><fo:inline color="#0070cd"><fo:inline font-style="italic">Dashboards
    for Kx</fo:inline></fo:inline></fo:basic-link><fo:footnote><fo:inline font-size="8pt" alignment-baseline="hanging">1</fo:inline><fo:footnote-body><fo:block font-size="8pt">1.
									http://code.kx.com/q/platform</fo:block></fo:footnote-body></fo:footnote>, but clients might have incumbent solutions
    they wish to connect to kdb+.
  </fo:block>
  <fo:block line-height="16pt" space-after="9pt" text-align="justify">
    Alternatively, many organizations might wish to migrate their
    back-end database to kdb+ for increased efficiency and scalability,
    while retaining their current visualization front end. This paper
    offers guidance.
  </fo:block>
  <fo:block line-height="16pt" space-after="9pt" text-align="justify">
    <fo:basic-link external-destination="url('https://tableau.com/')"><fo:inline color="#0070cd">Tableau</fo:inline></fo:basic-link><fo:footnote><fo:inline font-size="8pt" alignment-baseline="hanging">2</fo:inline><fo:footnote-body><fo:block font-size="8pt">2.
									https://tableau.com/</fo:block></fo:footnote-body></fo:footnote> is an example
    of a widely-used BI tool. This paper outlines how it can be used to
    access kdb+ via ODBC (Open Database Connectivity), a standard
    application-programming interface used to connect different database
    management systems, specifically designed to be independent of
    databases and operating systems. Version 3.4 of kdb+ included an
    updated version of its Windows ODBC driver (ODBCv3) to support wider
    access to kdb+ data.
  </fo:block>
  <fo:block line-height="16pt" space-after="9pt" text-align="justify">
    This paper illustrates the flexibility with which kdb+ data can be
    accessed by Tableau using ODBC. It explains further how kdb+’s
    caching feature may be used to improve performance by optimizing
    repeated queries.
  </fo:block>
  <fo:block line-height="16pt" space-after="9pt" text-align="justify">
    Keep in mind that there will always be limitations on third-party
    solutions not designed from the outset for processing real-time
    streaming data. Kx’s own visualization tool <fo:inline font-style="italic">Dashboards for
    Kx</fo:inline> is optimized for streaming queries and inherits
    functionality such as user management, load balancing, access
    control, caching and queuing from the underlying platform as well as
    direct access to q for comprehensive querying capabilities. Such
    features and their ability to support high-volume, low-latency
    access to streaming data cannot be assumed in third-party products.
  </fo:block>
  <fo:block line-height="16pt" space-after="9pt" text-align="justify">
    Guidelines on connection, setup, queries and advice on how to
    maximize performance are discussed. For both new and existing users,
    this paper aims to reduce the learning curve, boost efficiency and
    increase usability when combining these two technologies.
  </fo:block>
  <fo:block line-height="16pt" space-after="9pt" text-align="justify">
    All tests were run using kdb+ version 3.5 and Tableau 10.3.
  </fo:block>
  
  <fo:block id="connecting-to-kdb-using-odbc">
    <fo:block id="idm371384434272" font-size="18pt" line-height="22pt" margin-right="36pt" page-break-before="always" space-after="60pt" text-align="left">Connecting to kdb+ using ODBC</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      Instructions on how to connect kdb+ from Tableau Desktop for both
      Windows and Linux can be found at
      <fo:basic-link external-destination="url('http://code.kx.com/q/interfaces/q-server-for-odbc3')"><fo:inline color="#0070cd">Interfaces/Kdb+
      server for ODBC3</fo:inline></fo:basic-link><fo:footnote><fo:inline font-size="8pt" alignment-baseline="hanging">3</fo:inline><fo:footnote-body><fo:block font-size="8pt">3.
									http://code.kx.com/q/interfaces/q-server-for-odbc3</fo:block></fo:footnote-body></fo:footnote>.
    </fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      For an ODBC driver to connect to an application, it needs a DSN
      (Data Source Name). A DSN contains the name, directory and driver
      of the database, and (depending on the type of DSN) the access
      credentials of the user.
    </fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      With administrator rights, adding a new DSN is relatively
      straightforward. See the instructions linked to above.
    </fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      A second way to add a DSN does not require administrator access,
      and might be useful for some users. This defines the DSN
      connection details in a Registry file rather than adding new DSNs
      directly in the ODBC Data Source Administrator. This is an
      alternative to steps 3, 4 and 5 in the instructions linked to
      above.
    </fo:block>
    <fo:list-block provisional-distance-between-starts=".7cm" provisional-label-separation="0.3cm"><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Copy <fo:inline font-family="Pragmata Pro">qodbc.dll</fo:inline> to the correct location.
        </fo:block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">2.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Define the Registry file and save it to
          <fo:inline font-family="Pragmata Pro">C:\Users\&lt;username&gt;</fo:inline> with a
          <fo:inline font-family="Pragmata Pro">.reg</fo:inline> extension. Here is an example of what
          the file might look like.
        </fo:block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">3.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Double-click on the file when saved. This will create the
          correct driver entries, which for this example will be a new
          kdb+ DSN called <fo:inline font-family="Pragmata Pro">DEV</fo:inline>.
        </fo:block>
      </fo:list-item-body></fo:list-item></fo:list-block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      This second method makes it easier to maintain and share
      connection details with multiple users, as the DSN details reside
      in a separate text file rather than in the Windows Registry.
    </fo:block>
    <fo:block id="connecting-to-tableau-desktop">
      <fo:block font-weight="bold" font-size="14pt" line-height="17pt" margin-right="36pt" page-break-after="avoid" space-after="6pt" space-before="18pt" text-align="left">Connecting to Tableau Desktop</fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        Once a kdb+ DSN has been added, and the rest of the set-up
        instructions are followed, you are ready to connect to kdb+ from
        Tableau. On opening Tableau, you will be prompted to select the
        type of database you wish to connect to, select the option
        <fo:inline font-style="italic">Other Databases (ODBC)</fo:inline>.
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        
          <fo:external-graphic content-width="scale-down-to-fit" src="url(img/image1.png)" width="100%"/>
        
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        Next, select the correct DSN from the dropdown list and click
        <fo:inline font-style="italic">Connect</fo:inline>. This will automatically populate
        the Connection Attributes in the bottom half of the window using
        the details defined earlier in the Registry file. The final step
        is to click the <fo:inline font-style="italic">Sign In</fo:inline> button, which
        creates a connection to the kdb+ process, enabling the database
        to be queried via Tableau’s Custom SQL, as demonstrated in the
        following section.
      </fo:block>
    </fo:block>
    <fo:block id="connecting-to-tableau-server">
      <fo:block font-weight="bold" font-size="14pt" line-height="17pt" margin-right="36pt" page-break-after="avoid" space-after="6pt" space-before="18pt" text-align="left">Connecting to Tableau Server</fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        The set-up instructions above, both explicit and linked, are
        specifically for a user connecting from Tableau Desktop. This is
        the local version of Tableau installed on a desktop or laptop.
        Tableau Server, on the other hand, is installed on a Windows
        server and is accessible to users via a browser. Tableau Server
        brings additional collaboration, security and scalability
        capabilities not available using only Tableau Desktop.
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        Tableau workbooks can be shared between both by publishing from
        Tableau Desktop to Tableau Server. This procedure is detailed in
        the section <fo:inline font-style="italic">Publishing to Tableau Server</fo:inline>.
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        To connect via Tableau Server, the Registry file that was
        presented in the previous section needs to be configured. This
        process may be handled by an organization’s support team,
        depending on the installation setup. The driver also needs to be
        installed, and then the connection can be initialized much as
        for Tableau Desktop.
      </fo:block>
    </fo:block>
    <fo:block id="other-considerations">
      <fo:block font-weight="bold" font-size="14pt" line-height="17pt" margin-right="36pt" page-break-after="avoid" space-after="6pt" space-before="18pt" text-align="left">Other considerations</fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        Since a
        <fo:basic-link external-destination="url('https://github.com/KxSystems/kdb/blob/master/c/qodbc3.zip')"><fo:inline color="#0070cd">release
        on 2017.09.11</fo:inline></fo:basic-link><fo:footnote><fo:inline font-size="8pt" alignment-baseline="hanging">4</fo:inline><fo:footnote-body><fo:block font-size="8pt">4.
									https://github.com/KxSystems/kdb/blob/master/c/qodbc3.zip</fo:block></fo:footnote-body></fo:footnote>, qodbc3 allows specification of connection
        details without a DSN. This means all details, except the
        password, will be saved by Tableau in a workbook or saved data
        source. However, this change only affects desktop users. Because
        the password is not embedded, the DSN is still required to be
        defined on the server as this is the only way the password will
        be picked up for published reports.
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        It is also important to note that connection details are
        embedded in both the Tableau workbook and the DSN definition.
        For version management, when sharing workbooks between
        developers or when publishing them to Tableau Server, this can
        become problematic. One workaround solution to manage this is to
        wipe these details from the workbook with a script before
        sharing or publishing workbooks. This concept is explored below
        in <fo:inline font-style="italic">Publishing to Tableau Server</fo:inline>.
      </fo:block>
    </fo:block>
  </fo:block>
  <fo:block id="tableau-functionality-for-kdb">
    <fo:block id="idm371384409872" font-size="18pt" line-height="22pt" margin-right="36pt" page-break-before="always" space-after="60pt" text-align="left">Tableau functionality for kdb+</fo:block>
    <fo:block id="calling-q-from-tableau">
      <fo:block font-weight="bold" font-size="14pt" line-height="17pt" margin-right="36pt" page-break-after="avoid" space-after="6pt" space-before="18pt" text-align="left">Calling q from Tableau</fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        Once a successful connection has been made, the next step is to
        begin by running some sample queries. Tableau’s Custom SQL is
        the method by which q queries can be run from Tableau. In
        particular, the <fo:inline font-family="Pragmata Pro">q()</fo:inline> function can be used to
        send synchronous queries to kdb+, as shown below.
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        To demonstrate this, define a table <fo:inline font-family="Pragmata Pro">tab</fo:inline> in
        the kdb+ process you are connecting to.
      </fo:block>
      <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
q)N:8
q)dates:2018.03.28 + til 3
q)tab:([] date:N?dates;category:N?`CORP`EQ`GOV;volume:N?til 10000)
</fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        Then, in Tableau run the following in the <fo:inline font-style="italic">Custom
        SQL</fo:inline>.
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        
          <fo:external-graphic content-width="scale-down-to-fit" src="url(img/image2.png)" width="100%"/>
        
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        Now the data in the table <fo:inline font-family="Pragmata Pro">tab</fo:inline> is available
        for use in Tableau. Note that if <fo:inline font-family="Pragmata Pro">tab</fo:inline> is a not
        a partitioned table (and is small enough to be handled via SQL),
        you can just type its name into the table selector, there is no
        need to use <fo:inline font-family="Pragmata Pro">q('select from tab')</fo:inline>. Other
        acceptable syntaxes are:
      </fo:block>
      <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
q('tablename')
q('select from table where date in 2018.07.02')
q('function',&lt;Parameters.Date&gt;)
q('{[mydate] func[…]}',&lt;Parameters.Date&gt;)
</fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        Queries can be a simple select statement or can become much more
        complex and flexible using inbuilt parameters supplied by
        Tableau, which will be demonstrated in the next section.
      </fo:block>
      <fo:block background-color="#FFE" font-size="10.5pt" line-height="13pt" margin-bottom="9pt" margin-left="0mm" margin-right="0mm" page-break-inside="avoid" padding-left="3mm" padding-right="3mm" padding-top="3mm"><fo:block margin-bottom="6pt"><fo:inline vertical-align="sub"><fo:inline font-family="Material Icons" font-size="14pt"></fo:inline></fo:inline> <fo:inline font-weight="bold">Known SQL compatibility issues </fo:inline></fo:block><fo:list-block provisional-distance-between-starts="0.3cm" provisional-label-separation="0.15cm"><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
            <fo:block line-height="16pt" space-after="9pt" text-align="justify">
              SQL string literals are trimmed like q symbols
            </fo:block>
          </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
            <fo:block line-height="16pt" space-after="9pt" text-align="justify">
              <fo:inline font-family="Pragmata Pro">MIN()</fo:inline> and <fo:inline font-family="Pragmata Pro">MAX()</fo:inline>
              don’t work on strings
            </fo:block>
          </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
            <fo:block line-height="16pt" space-after="9pt" text-align="justify">
              q strings and booleans lack nulls, therefore SQL
              operations on null data resulting in these types
              
		‘erase’
	 nulls
            </fo:block>
          </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
            <fo:block line-height="16pt" space-after="9pt" text-align="justify">
              <fo:inline font-family="Pragmata Pro">COUNT</fo:inline> and
              <fo:inline font-family="Pragmata Pro">COUNT DISTINCT</fo:inline> don’t ignore nulls
            </fo:block>
          </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
            <fo:block line-height="16pt" space-after="9pt" text-align="justify">
              SQL selects from partitioned tables are not supported –
              one should pre-select from a partitioned table using the
              <fo:inline font-family="Pragmata Pro">q()</fo:inline> function instead
            </fo:block>
          </fo:list-item-body></fo:list-item></fo:list-block></fo:block>
    </fo:block>
    <fo:block id="datatypes">
      <fo:block font-weight="bold" font-size="14pt" line-height="17pt" margin-right="36pt" page-break-after="avoid" space-after="6pt" space-before="18pt" text-align="left">Datatypes</fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        Tableau caters for multiple q datatypes.
      </fo:block>
      <fo:table-and-caption margin-right="36pt" margin-bottom="9pt"><fo:table font-size="9pt"><fo:table-header border-bottom-style="solid" border-bottom-width=".5pt" page-break-after="avoid"><fo:table-row><fo:table-cell font-style="italic" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block linefeed-treatment="preserve" text-align="left">
                Tableau
              </fo:block></fo:table-cell><fo:table-cell font-style="italic" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block linefeed-treatment="preserve" text-align="left">
                q
              </fo:block></fo:table-cell></fo:table-row></fo:table-header><fo:table-body><fo:table-row page-break-inside="avoid"><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                String
              </fo:block></fo:table-cell><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                Symbol, String
              </fo:block></fo:table-cell></fo:table-row><fo:table-row page-break-inside="avoid"><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                Date
              </fo:block></fo:table-cell><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                Date
              </fo:block></fo:table-cell></fo:table-row><fo:table-row page-break-inside="avoid"><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                Date &amp; Time
              </fo:block></fo:table-cell><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                Timestamp
              </fo:block></fo:table-cell></fo:table-row><fo:table-row page-break-inside="avoid"><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                Numerical
              </fo:block></fo:table-cell><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                Int, float
              </fo:block></fo:table-cell></fo:table-row><fo:table-row page-break-inside="avoid"><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                Boolean
              </fo:block></fo:table-cell><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                Boolean
              </fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:table-and-caption>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        On loading data, Tableau automatically interprets the datatype
        of a field. It is recommended that the user checks these have
        been interpreted correctly after the data is loaded. If it is
        incorrect, the datatype can then be easily changed on the
        <fo:inline font-style="italic">Data Source</fo:inline> page or in the
        <fo:inline font-style="italic">Data</fo:inline> pane as shown below.
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        
          <fo:external-graphic content-width="scale-down-to-fit" src="url(img/image3.png)" width="100%"/>
        
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        
          <fo:external-graphic content-width="scale-down-to-fit" src="url(img/image4.png)" width="100%"/>
        
      </fo:block>
    </fo:block>
    <fo:block id="simple-parameters">
      <fo:block font-weight="bold" font-size="14pt" line-height="17pt" margin-right="36pt" page-break-after="avoid" space-after="6pt" space-before="18pt" text-align="left">Simple parameters</fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        Tableau parameters provide further flexibility when working with
        q functions. To demonstrate, define a function
        <fo:inline font-family="Pragmata Pro">func</fo:inline> that selects from the table
        <fo:inline font-family="Pragmata Pro">tab</fo:inline> defined above. This function can be
        called from Tableau using Tableau-defined parameters.
      </fo:block>
      <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
func:{[mydate;mycategory]
  select from tab where date in mydate, category in mycategory
  };
</fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        Take the parameter <fo:inline font-family="Pragmata Pro">mycategory</fo:inline>: in this
        example, a list of allowable symbols that are acceptable for the
        parameter <fo:inline font-family="Pragmata Pro">mycategory</fo:inline> can be defined in
        Tableau.
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        
          <fo:external-graphic content-width="scale-down-to-fit" src="url(img/image5.png)" width="100%"/>
        
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        
          <fo:external-graphic content-width="scale-down-to-fit" src="url(img/image6.png)" width="100%"/>
        
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        This can be done in the Custom SQL stage when you are writing
        your query. These parameters can then be shown and made
        available for users as a dropdown list on worksheets and
        dashboards as can be seen below.
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        
          <fo:external-graphic content-width="scale-down-to-fit" src="url(img/image7.png)" width="100%"/>
        
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        Tableau parameters are limited to static values, and a single
        select option when placed in a view. However, there are ways to
        make them more dynamic and flexible. This will be explored below
        in <fo:inline font-style="italic">Dynamic Parameters</fo:inline>.
      </fo:block>
    </fo:block>
    <fo:block id="tableau-filters">
      <fo:block font-weight="bold" font-size="14pt" line-height="17pt" margin-right="36pt" page-break-after="avoid" space-after="6pt" space-before="18pt" text-align="left">Tableau filters</fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        As shown above, parameters are a useful tool for creating
        user-defined inputs to visualizations. However, there are cases
        where the user may want to return the entire data set first and
        only afterwards reduce the data set. This can be achieved using
        Tableau’s filters.
      </fo:block>
<fo:block linefeed-treatment="preserve" line-height="16pt" space-after="9pt" text-align="left">
<fo:external-graphic content-width="scale-down-to-fit" src="url(img/image7.png)" width="100%"/>

<fo:inline font-size="10pt"><fo:inline font-style="italic">Tableau Category Parameter as defined in the previous section</fo:inline></fo:inline></fo:block>
<fo:block linefeed-treatment="preserve" line-height="16pt" space-after="9pt" text-align="left">
<fo:external-graphic content-width="scale-down-to-fit" src="url(img/image8.png)" width="100%"/>

<fo:inline font-size="10pt"><fo:inline font-style="italic">Tableau Category Filter</fo:inline></fo:inline></fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        Filters are the standard way to reduce the set of data displayed
        on a worksheet. Note from the above screenshots that filters are
        not limited to a single select option as parameters are.
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        Filters are most effective with fast queries on small datasets.
        For longer queries and/or larger datasets, filters become
        challenging from a performance point of view. This is because
        every time a filter selection is changed, the Custom SQL query
        runs the same query multiple times per view to build dimensions.
        Therefore the more filters and dimensions you add to a view, the
        slower performance becomes.
      </fo:block>
    </fo:block>
    <fo:block id="caching">
      <fo:block font-weight="bold" font-size="14pt" line-height="17pt" margin-right="36pt" page-break-after="avoid" space-after="6pt" space-before="18pt" text-align="left">Caching</fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        One way to get around this inefficiency is to introduce caching
        in kdb+. Caching is storing results from previous queries or
        calculations in an internal lookup table (or cache) for faster
        data retrieval on subsequent queries. Caching here is being used
        to address the problem of filters causing queries to be re-run.
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        
          <fo:external-graphic content-width="scale-down-to-fit" src="url(img/image9.png)" width="100%"/>
        
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        The following example demonstrates the performance improvement
        of caching when incorporated into a simple q function,
        <fo:inline font-family="Pragmata Pro">getTotalVolume</fo:inline> (below), which extracts the
        total volume by symbol from a table <fo:inline font-family="Pragmata Pro">t</fo:inline>.
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        The demonstration table <fo:inline font-family="Pragmata Pro">t</fo:inline> contains
        randomly-generated mock data of symbol and volume values.
      </fo:block>
      <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
N:100000000;
t:([] sym:N?`3;volume:N?10.0);
// Function used to compute the total volume by symbol from the table t
getTotalVolume:{[syms]
  select totalVolume:sum volume by sym from t where sym in syms
  };
</fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        Below is sample output of this function when called from
        Tableau. Query response times for an increasing number of
        symbols runs from hundreds of milliseconds to seconds:
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        
          <fo:external-graphic content-width="scale-down-to-fit" src="url(img/image10.png)" width="100%"/>
        
      </fo:block>
      <fo:table-and-caption margin-right="36pt" margin-bottom="9pt"><fo:table font-size="9pt"><fo:table-header border-bottom-style="solid" border-bottom-width=".5pt" page-break-after="avoid"><fo:table-row><fo:table-cell font-style="italic" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block linefeed-treatment="preserve" text-align="left">
                number of symbols
              </fo:block></fo:table-cell><fo:table-cell font-style="italic" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block linefeed-treatment="preserve" text-align="left">
                time
              </fo:block></fo:table-cell></fo:table-row></fo:table-header><fo:table-body><fo:table-row page-break-inside="avoid"><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                1,000,000
              </fo:block></fo:table-cell><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                13 ms
              </fo:block></fo:table-cell></fo:table-row><fo:table-row page-break-inside="avoid"><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                10,000,000
              </fo:block></fo:table-cell><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                120 ms
              </fo:block></fo:table-cell></fo:table-row><fo:table-row page-break-inside="avoid"><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                100,000,000
              </fo:block></fo:table-cell><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                1038 ms
              </fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:table-and-caption>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        To incorporate caching, the existing function can be modified to
        store the total volume result for each queried symbol in a keyed
        table, called <fo:inline font-family="Pragmata Pro">volumeCache</fo:inline>. Whenever the
        function is called from Tableau, an internal lookup is performed
        on the <fo:inline font-family="Pragmata Pro">volumeCache</fo:inline> table to determine if the
        calculation for the requested symbol has already been performed.
        If so, the result can be immediately returned, otherwise a
        calculation against the table <fo:inline font-family="Pragmata Pro">t</fo:inline> is performed.
      </fo:block>
      <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
volumeCache:([sym:`u#`symbol$()];totalVolume:`float$())
getTotalVolume:{[syms]
  if[-11h~type syms;syms:enlist syms];
  // Get the list of syms which contain entries in the volumeCache
  // Extract the totalVolume values for those symbols
  if[count preCalculated:([]sym:syms) inter key[volumeCache];
     result:select from volumeCache where ([]sym) in preCalculated
  ];
  // If all syms are contained in the volumeCache then return result
  if[not count notPreCalculated:([]sym:syms) except key[volumeCache];
    :result
  ];
  // For syms not present in volumeCache, perform lookup
  result,:newEntries:select totalVolume:sum volume by sym from t where
    ([]sym) in notPreCalculated;
  // upsert new results to volumeCache
  upsert[`volumeCache;newEntries];
  result 
  };
</fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        Tableau queries against this modified function are significantly
        faster and become sub-millisecond when symbols are already
        present within the <fo:inline font-family="Pragmata Pro">volumeCache</fo:inline>. This approach
        greatly reduces the effect of filtering previously highlighted:
      </fo:block>
      <fo:table-and-caption margin-right="36pt" margin-bottom="9pt"><fo:table font-size="9pt"><fo:table-header border-bottom-style="solid" border-bottom-width=".5pt" page-break-after="avoid"><fo:table-row><fo:table-cell font-style="italic" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block linefeed-treatment="preserve" text-align="left">
                number of symbols
              </fo:block></fo:table-cell><fo:table-cell font-style="italic" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block linefeed-treatment="preserve" text-align="left">
                time (1st query)
              </fo:block></fo:table-cell><fo:table-cell font-style="italic" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block linefeed-treatment="preserve" text-align="left">
                time (2nd query)
              </fo:block></fo:table-cell></fo:table-row></fo:table-header><fo:table-body><fo:table-row page-break-inside="avoid"><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                1,000,000
              </fo:block></fo:table-cell><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                3 ms
              </fo:block></fo:table-cell><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                &lt;0ms
              </fo:block></fo:table-cell></fo:table-row><fo:table-row page-break-inside="avoid"><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                10,000,000
              </fo:block></fo:table-cell><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                96 ms
              </fo:block></fo:table-cell><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                &lt;0ms
              </fo:block></fo:table-cell></fo:table-row><fo:table-row page-break-inside="avoid"><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                100,000,000
              </fo:block></fo:table-cell><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                1021 ms
              </fo:block></fo:table-cell><fo:table-cell padding-top="3pt" padding-bottom="3pt" padding-left="5pt" padding-right="5pt"><fo:block text-align="left">
                &lt;0ms
              </fo:block></fo:table-cell></fo:table-row></fo:table-body></fo:table></fo:table-and-caption>
    </fo:block>
    <fo:block id="dynamic-parameters">
      <fo:block font-weight="bold" font-size="14pt" line-height="17pt" margin-right="36pt" page-break-after="avoid" space-after="6pt" space-before="18pt" text-align="left">Dynamic parameters</fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        As mentioned above in <fo:inline font-style="italic">Simple parameters</fo:inline>,
        Tableau parameters are limited to static values, and a single
        select option when placed in a view. However, there are a number
        of ways to make parameters smarter, and can increase their
        usability and flexibility. Below, two such methods are
        described.
      </fo:block>
      <fo:block id="predefining-parameter-options-in-a-q-function">
        <fo:block font-size="12pt" font-weight="bold" line-height="17pt" margin-right="36pt" page-break-after="avoid" space-after="6pt" space-before="18pt" text-align="left">Predefining parameter options in a q function</fo:block>
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          From the previous example, the input parameter Category is
          limited to single values. This can be made more flexible by
          defining in the function a range of acceptable values. In the
          example below, the argument <fo:inline font-family="Pragmata Pro">`all</fo:inline> leads to a
          select with no restriction on <fo:inline font-family="Pragmata Pro">category</fo:inline>.
        </fo:block>
        <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
func:{[mydate;mycategory]
  $[mycategory=`all;
    select from tab where date in mydate;
    select from tab where date in mydate, category in mycategory]
  };
</fo:block>
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Then <fo:inline font-family="Pragmata Pro">all</fo:inline> can be added to the list of
          predefined values in Tableau’s definition of Category:
        </fo:block>
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          
            <fo:external-graphic content-width="scale-down-to-fit" src="url(img/image11.png)" width="100%"/>
          
        </fo:block>
      </fo:block>
      <fo:block id="using-parameters-with-calculated-fields">
        <fo:block font-size="12pt" font-weight="bold" line-height="17pt" margin-right="36pt" page-break-after="avoid" space-after="6pt" space-before="18pt" text-align="left">Using parameters with calculated fields</fo:block>
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Using parameters in conjunction with Tableau’s
          calculated-field functionality can be a convenient and
          flexible tool in calculations as well as graphical
          representation. This is useful when the output the user wants
          to see is dependent on an input parameter, and a field needs
          to be adjusted accordingly.
        </fo:block>
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          For example, in the user-defined
          <fo:inline font-family="Pragmata Pro">Calculation1</fo:inline> logic below, the quantity
          field will be divided by a different amount depending on the
          chosen Category value. 
        </fo:block>
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          
            <fo:external-graphic content-width="scale-down-to-fit" src="url(img/image12.png)" width="100%"/>
          
        </fo:block>
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Below is sample output from when the user selects a
          <fo:inline font-style="italic">Category</fo:inline> value of <fo:inline font-family="Pragmata Pro">EQ</fo:inline>.
        </fo:block>
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          
            <fo:external-graphic content-width="scale-down-to-fit" src="url(img/image13.png)" width="100%"/>
          
        </fo:block>
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          In contrast, when the user selects <fo:inline font-family="Pragmata Pro">CORP</fo:inline> the
          calculated field will be divided by 50.
        </fo:block>
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          
            <fo:external-graphic content-width="scale-down-to-fit" src="url(img/image14.png)" width="100%"/>
          
        </fo:block>
      </fo:block>
    </fo:block>
    <fo:block id="multiple-data-sources">
      <fo:block font-weight="bold" font-size="14pt" line-height="17pt" margin-right="36pt" page-break-after="avoid" space-after="6pt" space-before="18pt" text-align="left">Multiple data sources</fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        Kdb+ is efficient at joining data sets, and can easily do so in
        memory at the gateway level. However, it is also worth noting
        that it is possible to join two or more different datasets in
        Tableau if they share a common dimension or key. This can be
        useful when it is desirable to join certain datasets for
        reporting purposes only.
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        Tableau maintains connections to multiple data sources via a
        number of open live connections to a q instance. This
        functionality makes it possible to use the results from one data
        source to filter another. So far, in this paper, the examples
        have described functionality using only one data source. For the
        rest of this section, working with multiple data sources and
        joining them in Tableau will be explored.
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        One of the first things to note is that fields from different
        data sources can be included on the same worksheet, provided the
        sources are mapped to each other. In Tableau, fields from
        different data sources can be mapped to each other even if they
        have a different name, so long as they are the same datatype.
        This can be controlled and edited in <fo:inline font-style="italic">Data &gt; Edit
        Relationships</fo:inline>.
      </fo:block>
      <fo:block id="actions">
        <fo:block font-size="12pt" font-weight="bold" line-height="17pt" margin-right="36pt" page-break-after="avoid" space-after="6pt" space-before="18pt" text-align="left">Actions</fo:block>
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Once a dashboard is created, the filters are controlled in
          <fo:inline font-style="italic">Dashboard &gt; Actions</fo:inline>. When setting up
          actions for kdb+ data sources, it is important to note how the
          selection is cleared. For large datasets, it is recommended
          that you select the action <fo:inline font-style="italic">Exclude all
          values</fo:inline>. This feature prevents data from being
          displayed in <fo:inline font-family="Pragmata Pro">Sheet 2</fo:inline> until data is first
          selected in <fo:inline font-family="Pragmata Pro">Sheet 1</fo:inline>. This has a very
          significant effect on performance as it means Tableau only
          builds dimensions for views within the dataset that has been
          filtered.
        </fo:block>
        <fo:block page-break-after="avoid" text-align="center"><fo:external-graphic content-width="scale-down-to-fit" src="url(img/image15.png)" width="100%"/></fo:block><fo:block font-size="9pt" font-style="italic" margin-bottom="15pt">Target Sheets</fo:block>
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          The following example demonstrates how much of an improvement
          on performance this feature can have. Once a table
          <fo:inline font-family="Pragmata Pro">t</fo:inline> is defined and subsequently called from
          Tableau, the next step is to create a dashboard.
        </fo:block>
        <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
q) N:10000000
q) t:([] sym:N?`3;volume:N?10.0)
</fo:block>
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          
            <fo:external-graphic content-width="scale-down-to-fit" src="url(img/image16.png)" width="100%"/>
          
        </fo:block>
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Step-by-step instructions on how to build the dashboard shown
          below and performance tests can be found in Appendix A.
        </fo:block>
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          
            <fo:external-graphic content-width="scale-down-to-fit" src="url(img/image17.png)" width="100%"/>
          
        </fo:block>
<fo:block linefeed-treatment="preserve" line-height="16pt" space-after="9pt" text-align="left">
<fo:external-graphic content-width="scale-down-to-fit" src="url(img/image18.png)" width="100%"/>

<fo:inline font-size="10pt"><fo:inline font-style="italic">Action Selection: Show all values</fo:inline></fo:inline></fo:block>
<fo:block linefeed-treatment="preserve" line-height="16pt" space-after="9pt" text-align="left">
<fo:external-graphic content-width="scale-down-to-fit" src="url(img/image19.png)" width="100%"/>

<fo:inline font-size="10pt"><fo:inline font-style="italic">Action Selection: Exclude all values</fo:inline></fo:inline></fo:block>
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Using the <fo:inline font-style="italic">Exclude all values</fo:inline> option
          yields a clear performance improvement. Computing time reduces
          from ~45secs per select/deselect down to ~0.3ms. Also, when
          using <fo:inline font-style="italic">Exclude all values</fo:inline> there is no
          Executing Query time.
        </fo:block>
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Exploiting this feature can be hugely useful when working with
          kdb+ and Tableau where the volume of datasets can be very
          large.
        </fo:block>
      </fo:block>
    </fo:block>
  </fo:block>
  <fo:block id="publishing-to-tableau-server">
    <fo:block id="idm371384282480" font-size="18pt" line-height="22pt" margin-right="36pt" page-break-before="always" space-after="60pt" text-align="left">Publishing to Tableau Server</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      As mentioned above, to share workbooks between Tableau Desktop and
      Tableau Server you can publish the former to the latter. Tableau
      provides
      <fo:basic-link external-destination="url('https://onlinehelp.tableau.com/current/pro/desktop/en-us/publish_workbooks_howto.html')"><fo:inline color="#0070cd">detailed
      documentation and instructions</fo:inline></fo:basic-link><fo:footnote><fo:inline font-size="8pt" alignment-baseline="hanging">5</fo:inline><fo:footnote-body><fo:block font-size="8pt">5.
									https://onlinehelp.tableau.com/current/pro/desktop/en-us/publish_workbooks_howto.html</fo:block></fo:footnote-body></fo:footnote> on the general publishing
      procedure, which involves publishing from within an already-open
      workbook.
    </fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      
        <fo:external-graphic content-width="scale-down-to-fit" src="url(img/image20.png)" width="100%"/>
      
    </fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      This is not an ideal way to publish workbooks that are connected
      to a kdb+ database, because connection details are stored within
      the workbook itself. Take the following scenario:
    </fo:block>
    <fo:list-block provisional-distance-between-starts="0.3cm" provisional-label-separation="0.15cm"><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          A workbook has been developed in Tableau Desktop and is ready
          to share to the <fo:inline font-family="Pragmata Pro">Testing</fo:inline> partition in
          Tableau Server.
        </fo:block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Throughout development, a development DSN has been used. But
          the workbook needs to be published to a UAT DSN.
        </fo:block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          So the DSN details need to be changed to the UAT DSN before
          publication.
        </fo:block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          The workbook again needs to be promoted, this time to the
          <fo:inline font-family="Pragmata Pro">Production</fo:inline> partition.
        </fo:block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          The workbook must be reopened, and the DSN details changed to
          the production DSN, before final promotion to
          <fo:inline font-family="Pragmata Pro">Production</fo:inline>.
        </fo:block>
      </fo:list-item-body></fo:list-item></fo:list-block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      This process is manual and prone to errors. For kdb+ connections,
      it is recommended to use the <fo:inline font-family="Pragmata Pro">tabcmd</fo:inline>
      command-line utility which, among other things, enables the user
      to publish to Tableau Server from the command line. This utility
      allows the user to deploy sheets programmatically, streamlining
      the process hugely. It also means that as part of the deploy
      procedure, the workbook can be edited by a script before
      publishing via <fo:inline font-family="Pragmata Pro">tabcmd</fo:inline>. This means you can do
      some efficient things like:
    </fo:block>
    <fo:list-block provisional-distance-between-starts="0.3cm" provisional-label-separation="0.15cm"><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Wipe out the connection details that are automatically
          embedded in the workbook
        </fo:block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Pick which DSN to point to, e.g. <fo:inline font-family="Pragmata Pro">DEV</fo:inline>,
          <fo:inline font-family="Pragmata Pro">UAT</fo:inline>, <fo:inline font-family="Pragmata Pro">QA</fo:inline>,
          <fo:inline font-family="Pragmata Pro">Prod</fo:inline>
        </fo:block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Pick which Tableau server to publish e.g.
          <fo:inline font-family="Pragmata Pro">tableau.net</fo:inline> or
          <fo:inline font-family="Pragmata Pro">tableau-uat.net</fo:inline>
        </fo:block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Pick which Tableau environment to publish to e.g.
          <fo:inline font-family="Pragmata Pro">Development</fo:inline>, <fo:inline font-family="Pragmata Pro">Testing</fo:inline> or
          <fo:inline font-family="Pragmata Pro">Production</fo:inline>
        </fo:block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Edit the Tableau project name
        </fo:block>
      </fo:list-item-body></fo:list-item></fo:list-block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      Using <fo:inline font-family="Pragmata Pro">tabcmd</fo:inline> and a script to edit the workbook
      can be an effective way to make the publishing process smoother
      when connecting to kdb+, especially when scaling use cases and
      looking to publish across multiple environments and DSNs.
    </fo:block>
  </fo:block>
  <fo:block id="conclusion">
    <fo:block id="idm371384260080" font-size="18pt" line-height="22pt" margin-right="36pt" page-break-before="always" space-after="60pt" text-align="left">Conclusion</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      Kdb+ is well known as the world’s fastest time-series database.
      Kx’s own visualization tool, <fo:inline font-style="italic">Dashboards for
      Kx</fo:inline>, is optimized for this technology. However, kdb+ is
      flexible enough to connect with a range of different visualization
      tools. This whitepaper demonstrates how to connect to one such
      visualization tool, Tableau, by means of the Kx ODBC driver.
    </fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      You have seen how to set up a connection between kdb+ and Tableau
      using ODBC, with detailed instructions on how best to use
      Tableau’s query functionality, datatypes, parameters and filters
      with the q language.
    </fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      The key takeaways include how kdb+’s caching feature may be used
      to improve performance by optimizing repeated queries from
      Tableau. Further to this, improving performance when using filters
      with multiple data sources was explored. The methods provided in
      this paper demonstrate that kdb+ and Tableau can be combined in an
      efficient way despite limitations that occur when combining the
      two technologies.
    </fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      If the question is 
		‘Is Tableau the best, and best performing
      visualization tool when combining with kdb+?’
	, the answer
      is 
		‘No. There are other visualization tools better tailored
      to the kdb+ technology, for example Kx’s visualization solution
      <fo:inline font-style="italic">Dashboards for Kx</fo:inline>.’
	 But if the
      question is 
		‘Can you combine these two technologies in an
      effective way?’
	 the answer is 
		‘Yes’
	, and by
      applying the functionality described in this paper to work around
      limitations, to connect a Tableau visualization front-end to a
      kdb+ back end.
    </fo:block>
  </fo:block>
  <fo:block id="appendix-a">
    <fo:block id="idm371384252592" font-size="18pt" line-height="22pt" margin-right="36pt" page-break-before="always" space-after="60pt" text-align="left">Appendix A</fo:block>
    <fo:list-block provisional-distance-between-starts=".7cm" provisional-label-separation="0.3cm"><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Create <fo:inline font-family="Pragmata Pro">Sheet 1</fo:inline>
        </fo:block>
        <fo:list-block provisional-distance-between-starts=".7cm" provisional-label-separation="0.3cm"><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
            <fo:block line-height="16pt" space-after="9pt" text-align="justify">
              Drag and drop <fo:inline font-family="Pragmata Pro">sym</fo:inline> to
              <fo:inline font-style="italic">Columns</fo:inline>.
            </fo:block>
          </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">2.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
            <fo:block line-height="16pt" space-after="9pt" text-align="justify">
              Drag and drop <fo:inline font-family="Pragmata Pro">Number of Records</fo:inline> to
              <fo:inline font-style="italic">Rows</fo:inline>.
            </fo:block>
          </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">3.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
            <fo:block line-height="16pt" space-after="9pt" text-align="justify">
              Drag and drop <fo:inline font-family="Pragmata Pro">volume</fo:inline> to the
              <fo:inline font-style="italic">Marks</fo:inline> pane on color. Right-click and
              pick <fo:inline font-style="italic">Discrete</fo:inline>.
            </fo:block>
          </fo:list-item-body></fo:list-item></fo:list-block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">2.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Create <fo:inline font-family="Pragmata Pro">Sheet 2</fo:inline>
        </fo:block>
        <fo:list-block provisional-distance-between-starts=".7cm" provisional-label-separation="0.3cm"><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
            <fo:block line-height="16pt" space-after="9pt" text-align="justify">
              Drag and drop <fo:inline font-family="Pragmata Pro">sym</fo:inline> to
              <fo:inline font-style="italic">Rows</fo:inline>.
            </fo:block>
          </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">2.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
            <fo:block line-height="16pt" space-after="9pt" text-align="justify">
              Drag and drop <fo:inline font-family="Pragmata Pro">volume</fo:inline> to
              <fo:inline font-style="italic">Rows</fo:inline>. Right-click and pick both
              <fo:inline font-style="italic">Dimension</fo:inline> and
              <fo:inline font-style="italic">Discrete</fo:inline>. This means every row will
              be displayed and not just the summed value.
            </fo:block>
          </fo:list-item-body></fo:list-item></fo:list-block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">3.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Create <fo:inline font-family="Pragmata Pro">Dashboard 1</fo:inline>
        </fo:block>
        <fo:list-block provisional-distance-between-starts=".7cm" provisional-label-separation="0.3cm"><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
            <fo:block line-height="16pt" space-after="9pt" text-align="justify">
              Drag <fo:inline font-family="Pragmata Pro">Sheet 1</fo:inline> onto the top of the
              dashboard.
            </fo:block>
          </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">2.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
            <fo:block line-height="16pt" space-after="9pt" text-align="justify">
              Drag <fo:inline font-family="Pragmata Pro">Sheet 2</fo:inline> onto the bottom of the
              dashboard.
            </fo:block>
          </fo:list-item-body></fo:list-item></fo:list-block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">4.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Make <fo:inline font-family="Pragmata Pro">Sheet 1</fo:inline> a filter for
          <fo:inline font-family="Pragmata Pro">Sheet 2</fo:inline> on the dashboard.
        </fo:block>
        <fo:list-block provisional-distance-between-starts=".7cm" provisional-label-separation="0.3cm"><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
            <fo:block line-height="16pt" space-after="9pt" text-align="justify">
              Hover over <fo:inline font-family="Pragmata Pro">Sheet 1</fo:inline> and on the top
              right-hand side select the middle icon that looks like a
              filter.
            </fo:block>
          </fo:list-item-body></fo:list-item></fo:list-block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">5.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Testing performance with default filter selection
        </fo:block>
        <fo:list-block provisional-distance-between-starts=".7cm" provisional-label-separation="0.3cm"><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
            <fo:block line-height="16pt" space-after="9pt" text-align="justify">
              Pick <fo:inline font-style="italic">Help &gt; Settings and Performance &gt;
              Start Performance Recording</fo:inline>
            </fo:block>
          </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">2.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
            <fo:block line-height="16pt" space-after="9pt" text-align="justify">
              Select and deselect some of the bars in the top graph. You
              should notice much slower performance on deselect.
            </fo:block>
          </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">3.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
            <fo:block line-height="16pt" space-after="9pt" text-align="justify">
              Pick <fo:inline font-style="italic">Help &gt; Settings and Performance &gt;
              Stop Performance Recording</fo:inline>
            </fo:block>
          </fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          A performance workbook will then pop up, and you can analyze
          the performance.
        </fo:block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">6.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Testing performance with selection <fo:inline font-style="italic">Exclude all
          values</fo:inline>
        </fo:block>
        <fo:list-block provisional-distance-between-starts=".7cm" provisional-label-separation="0.3cm"><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">1.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
            <fo:block line-height="16pt" space-after="9pt" text-align="justify">
              Pick <fo:inline font-style="italic">Dashboard &gt; Actions &gt; Edit &gt;
              Select 
		‘Exclude all values’
	</fo:inline>
            </fo:block>
          </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">2.</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
            <fo:block line-height="16pt" space-after="9pt" text-align="justify">
              Repeat step 5
            </fo:block>
          </fo:list-item-body></fo:list-item></fo:list-block>
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          A second performance workbook will pop up and can be compared
          with the previous one to analyze performance.
        </fo:block>
      </fo:list-item-body></fo:list-item></fo:list-block>
  </fo:block>
</fo:block></fo:flow></fo:page-sequence></fo:root>
