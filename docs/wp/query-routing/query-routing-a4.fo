<?xml version="1.0"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:db="http://docbook.org/ns/docbook" xmlns:rx="http://www.renderx.com/XSL/Extensions" xmlns:xlink="http://www.w3.org/1999/xlink"><rx:meta-info><rx:meta-field name="author" value="&#10;        Kevin&#10;        Holsgrove&#10;      "/><rx:meta-field name="creator" value="Kx Systems"/><rx:meta-field name="title" value="Query Routing &#x2013; a kdb+ framework for a scalable, load balanced system"/><rx:meta-field name="keywords" value="Kx, Kx Systems, kdb+, query, routing, load, balancing, kdb+, gateway"/></rx:meta-info><rx:outline><rx:bookmark internal-destination="technical-overview"><rx:bookmark-label>Technical overview</rx:bookmark-label></rx:bookmark><rx:bookmark internal-destination="gateways"><rx:bookmark-label>Gateways</rx:bookmark-label></rx:bookmark><rx:bookmark internal-destination="load-balancer-1"><rx:bookmark-label>Load Balancer</rx:bookmark-label></rx:bookmark><rx:bookmark internal-destination="example-service"><rx:bookmark-label>Example service</rx:bookmark-label></rx:bookmark><rx:bookmark internal-destination="example-client"><rx:bookmark-label>Example client</rx:bookmark-label></rx:bookmark><rx:bookmark internal-destination="conclusion"><rx:bookmark-label>Conclusion</rx:bookmark-label></rx:bookmark></rx:outline><fo:layout-master-set><fo:simple-page-master master-name="cover-page" page-width="210mm" page-height="297mm"><fo:region-body margin-top="0" margin-bottom="0" margin-left="0" margin-right="0" background-color="#eeeded"/></fo:simple-page-master><fo:simple-page-master master-name="toc" page-width="210mm" page-height="297mm" margin-top="30pt" margin-bottom="30pt" margin-left="45pt" margin-right="45pt"><fo:region-body margin-top="48pt" margin-bottom="32pt" margin-left="60pt" margin-right="60pt"/><fo:region-before extent="30pt"/><fo:region-after extent="30pt"/></fo:simple-page-master><fo:simple-page-master master-name="standard-page" page-width="210mm" page-height="297mm" margin-top="30pt" margin-bottom="30pt" margin-left="45pt" margin-right="45pt"><fo:region-body margin-top="48pt" margin-bottom="32pt" margin-left="40pt" margin-right="40pt"/><fo:region-before extent="30pt"/><fo:region-after extent="30pt"/></fo:simple-page-master></fo:layout-master-set><fo:page-sequence master-reference="cover-page" font-family="STIX2" initial-page-number="1" language="en" country="gb"><fo:flow flow-name="xsl-region-body"><fo:block-container absolute-position="absolute" top="0mm" right="0mm" width="2in" height="2in"><fo:block text-align="right"><fo:external-graphic src="url(/Users/sjt/Projects/kx/github/StephenTaylor-Kx/mkdocs2pdf/img/diamond-white.png)" content-width="40mm" scaling="uniform"/></fo:block></fo:block-container><fo:block-container absolute-position="absolute" bottom="0mm" left="0mm" width="2.5in" height="30mm"><fo:block><fo:external-graphic src="url(/Users/sjt/Projects/kx/github/StephenTaylor-Kx/mkdocs2pdf/img/diamond-bottom-left-white.png)" content-width="50mm" scaling="uniform"/></fo:block></fo:block-container><fo:block-container absolute-position="absolute" bottom="0mm" right="0mm" width="4in" height="50mm"><fo:block text-align="right"><fo:external-graphic src="url(/Users/sjt/Projects/kx/github/StephenTaylor-Kx/mkdocs2pdf/img/kx-cover.png)" content-width="75mm"/></fo:block></fo:block-container><fo:block-container absolute-position="absolute" top="35mm" left="15mm"><fo:block color="#0070cd" font-family="Proxima Nova" font-size="60pt" font-weight="bold" letter-spacing="-4pt">kx</fo:block></fo:block-container><fo:block-container absolute-position="absolute" top="40mm" left="40mm"><fo:block><fo:external-graphic src="url(/Users/sjt/Projects/kx/github/StephenTaylor-Kx/mkdocs2pdf/img/its-about-time.png)"/></fo:block></fo:block-container><fo:block-container absolute-position="absolute" top="80mm" left="35mm"><fo:block font-family="Proxima Nova" color="#0070cd" font-size="18pt" font-weight="400">
							Technical Whitepaper
						</fo:block><fo:block margin-top="9pt" margin-right="30mm" line-height="1.4" font-size="24pt" font-weight="400">Query Routing – a kdb+ framework for a scalable, load balanced system</fo:block></fo:block-container><fo:block-container absolute-position="absolute" top="170mm" left="35mm"><fo:block line-height="16pt" font-weight="bold">Date</fo:block></fo:block-container><fo:block-container absolute-position="absolute" top="170mm" left="55mm" width="100mm"><fo:block line-height="16pt" text-align="left">November 2015</fo:block></fo:block-container><fo:block-container absolute-position="absolute" top="180mm" left="35mm"><fo:block line-height="16pt" font-weight="bold">Author</fo:block></fo:block-container><fo:block-container absolute-position="absolute" top="180mm" left="55mm" width="100mm"><fo:block line-height="16pt" text-align="left"><fo:block line-height="16pt" space-after="9pt" text-align="justify">
      Kevin Holsgrove is a kdb+ consultant based in New York. He has
      developed data and analytic systems for some of the world’s
      largest financial institutions in a range of asset classes.
    </fo:block></fo:block></fo:block-container><fo:block> </fo:block></fo:flow></fo:page-sequence><fo:page-sequence master-reference="toc" font-family="STIX2" language="en" country="gb"><fo:static-content flow-name="xsl-region-before"><fo:block text-align-last="justify" font-family="Proxima Nova" color="gray"><fo:inline font-size="9pt">Query Routing – a kdb+ framework for a scalable, load balanced system</fo:inline><fo:leader leader-pattern="space"/><fo:inline color="#0070cd" font-size="18pt" font-weight="bold" letter-spacing="-2pt">kx</fo:inline></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after"><fo:block color="gray" text-align="right"><fo:inline font-family="Proxima Nova" font-size="9pt" letter-spacing="2pt"><fo:page-number/></fo:inline></fo:block></fo:static-content><fo:flow flow-name="xsl-region-body"><fo:block break-before="page"><fo:block font-size="14pt" text-align="center" margin-top="36pt" margin-bottom="36pt">Contents</fo:block><fo:block margin-bottom="6pt" text-align-last="justify"><fo:basic-link internal-destination="idm544625728176">Technical overview <fo:leader leader-pattern="dots"/> <fo:page-number-citation ref-id="idm544625728176"/></fo:basic-link></fo:block><fo:block margin-bottom="6pt" text-align-last="justify"><fo:basic-link internal-destination="idm544625705904">Gateways <fo:leader leader-pattern="dots"/> <fo:page-number-citation ref-id="idm544625705904"/></fo:basic-link></fo:block><fo:block margin-bottom="6pt" text-align-last="justify"><fo:basic-link internal-destination="idm544625672592">Load Balancer <fo:leader leader-pattern="dots"/> <fo:page-number-citation ref-id="idm544625672592"/></fo:basic-link></fo:block><fo:block margin-bottom="6pt" text-align-last="justify"><fo:basic-link internal-destination="idm544625651888">Example service <fo:leader leader-pattern="dots"/> <fo:page-number-citation ref-id="idm544625651888"/></fo:basic-link></fo:block><fo:block margin-bottom="6pt" text-align-last="justify"><fo:basic-link internal-destination="idm544625635824">Example client <fo:leader leader-pattern="dots"/> <fo:page-number-citation ref-id="idm544625635824"/></fo:basic-link></fo:block><fo:block margin-bottom="6pt" text-align-last="justify"><fo:basic-link internal-destination="idm544625629856">Conclusion <fo:leader leader-pattern="dots"/> <fo:page-number-citation ref-id="idm544625629856"/></fo:basic-link></fo:block></fo:block></fo:flow></fo:page-sequence><fo:page-sequence master-reference="standard-page" font-family="STIX2" language="en" country="gb"><fo:static-content flow-name="xsl-region-before"><fo:block text-align-last="justify" font-family="Proxima Nova" color="gray"><fo:inline font-size="9pt">Query Routing – a kdb+ framework for a scalable, load balanced system</fo:inline><fo:leader leader-pattern="space"/><fo:inline color="#0070cd" font-size="18pt" font-weight="bold" letter-spacing="-2pt">kx</fo:inline></fo:block></fo:static-content><fo:static-content flow-name="xsl-footnote-separator"><fo:block><fo:leader leader-pattern="rule" rule-thickness=".5pt" leader-length="50%"/></fo:block></fo:static-content><fo:static-content flow-name="xsl-region-after"><fo:block color="gray" text-align="right"><fo:inline font-family="Proxima Nova" font-size="9pt" letter-spacing="2pt"><fo:page-number/></fo:inline></fo:block></fo:static-content><fo:flow flow-name="xsl-region-body"><fo:block id="query-routing-a-kdb-framework-for-a-scalable-load-balanced-system">
  <fo:block id="idm544625736496" font-size="18pt" line-height="22pt" margin-right="36pt" page-break-before="always" space-after="60pt" text-align="left">Query Routing: A kdb+ framework for a scalable, load balanced
  system</fo:block>
  <fo:block line-height="16pt" space-after="9pt" text-align="justify">
    Due to the large scale that kdb+ systems commonly grow to, it is
    important to build solid foundations so that as the number of users
    and size of databases increase, the system is able to easily absorb
    the extra capacity.
  </fo:block>
  <fo:block line-height="16pt" space-after="9pt" text-align="justify">
    Distributed kdb+ systems have been covered in a number of Kx
    Technical Whitepapers. The primary objective of this paper is to
    expand on routing, query tagging and connectivity management of a
    large distributing kdb+ system. The basic architecture used in this
    paper is based heavily on the ideas discussed in another whitepaper:
    <fo:basic-link external-destination="url('https://code.kx.com/q/wp/common_design_principles_for_kdb_gateways.pdf')"><fo:inline color="#0070cd">
		‘Common
    design principles for kdb+ gateways’
	</fo:inline></fo:basic-link><fo:footnote><fo:inline font-size="8pt" alignment-baseline="hanging">1</fo:inline><fo:footnote-body><fo:block font-size="8pt">1.
									https://code.kx.com/q/wp/common_design_principles_for_kdb_gateways.pdf</fo:block></fo:footnote-body></fo:footnote>.
  </fo:block>
  <fo:block line-height="16pt" space-after="9pt" text-align="justify">
    It is recommended the reader understand these concepts before
    progressing with this paper.
  </fo:block>
  <fo:block line-height="16pt" space-after="9pt" text-align="justify">
    This paper focuses on the design principle of the Connection Manager
    Load Balancer schematic whilst providing an asynchronous-only method
    of communication between processes. In this paper, our Load Balancer
    will also act as a Connection Manager with distributing access to
    all services whilst minimizing the waiting time for gateways.
  </fo:block>
  <fo:block line-height="16pt" space-after="9pt" text-align="justify">
    Traditional load-balancing techniques such as a straightforward
    round-robin approach to resource allocation is an acceptable
    approach for many systems, however it can result in several queries
    becoming queued up behind a long-running query whilst other service
    resources are idle. In this paper, the method used aims to be more
    efficient by tagging user queries that enter a gateway, identifying
    free services, and allocating queries on this basis.
  </fo:block>
  <fo:block line-height="16pt" space-after="9pt" text-align="justify">
    There are many other potential solutions to building a kdb+
    framework for load balancing and query routing. Rather than
    presenting a golden solution, this paper explores one method of
    implementation.
  </fo:block>
  <fo:block line-height="16pt" space-after="9pt" text-align="justify">
    All tests were run using kdb+ version 3.3 (2015.11.03)
  </fo:block>
  
  <fo:block id="technical-overview">
    <fo:block id="idm544625728176" font-size="18pt" line-height="22pt" margin-right="36pt" page-break-before="always" space-after="60pt" text-align="left">Technical overview</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      Interaction between the user and a gateway occurs through deferred
      synchronous communication, allowing multiple users to interact
      with a single gateway at the same time. With exception to the
      interaction between the user and the gateway, all processes in our
      system communicate via asynchronous messaging.
    </fo:block>
<fo:block linefeed-treatment="preserve" line-height="16pt" space-after="9pt" text-align="left">
<fo:external-graphic content-width="scale-down-to-fit" src="url(img/image3.png)" width="100%"/>

<fo:inline font-size="10pt"><fo:inline font-style="italic">Overview of system framework</fo:inline></fo:inline></fo:block>
    <fo:block id="gateway">
      <fo:block font-weight="bold" font-size="14pt" line-height="17pt" margin-right="36pt" page-break-after="avoid" space-after="6pt" space-before="18pt" text-align="left">Gateway</fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        The gateway is designed to accommodate multiple user requests,
        storing each query in an internal table and assigning a unique
        sequence number to each while keeping record of the handle to
        the user’s process. The gateway requests a service from the load
        balancer and sends the user’s query to the allocated service.
        The results are then returned to the user via the handle
        associated with the query sequence number.
      </fo:block>
    </fo:block>
    <fo:block id="load-balancer">
      <fo:block font-weight="bold" font-size="14pt" line-height="17pt" margin-right="36pt" page-break-after="avoid" space-after="6pt" space-before="18pt" text-align="left">Load Balancer</fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        The Load Balancer has the following purposes:
      </fo:block>
      <fo:list-block provisional-distance-between-starts="0.3cm" provisional-label-separation="0.15cm"><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
          <fo:block line-height="16pt" space-after="9pt" text-align="justify">
            A service provider informing gateways of all services within
            the system
          </fo:block>
        </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
          <fo:block line-height="16pt" space-after="9pt" text-align="justify">
            Service allocator assigning gateways and their unique query
            sequence number to the next available service
          </fo:block>
        </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
          <fo:block line-height="16pt" space-after="9pt" text-align="justify">
            Connectivity manager appropriately amending requests based
            on whether services/gateways are connected/disconnected to
            the system.
          </fo:block>
        </fo:list-item-body></fo:list-item></fo:list-block>
    </fo:block>
    <fo:block id="service">
      <fo:block font-weight="bold" font-size="14pt" line-height="17pt" margin-right="36pt" page-break-after="avoid" space-after="6pt" space-before="18pt" text-align="left">Service</fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        A <fo:inline font-style="italic">service</fo:inline> is a broad term that can denote a
        typical HDB/RDB kdb+ database, or more complex report/function
        processes custom-designed to perform any range of aggregations.
        By starting duplicate instances of a service (e.g. HDBs pointing
        at the same data, RDBs subscribing to the same Tickerplant), we
        provide a pool of resources per service that can be deployed to
        different servers. This allows the potential for a hot-hot set
        up in which our framework will not only efficiently allocate
        between resources, but also automatically divert user queries in
        the event of a service/host failure.
      </fo:block>
    </fo:block>
    <fo:block id="user-interaction-and-logic-flow">
      <fo:block font-weight="bold" font-size="14pt" line-height="17pt" margin-right="36pt" page-break-after="avoid" space-after="6pt" space-before="18pt" text-align="left">User interaction and logic flow</fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        Services for any of the above databases can be distributed on
        separate servers, the quantity of which may be dependent on
        available hardware or user demand and be configured per database
        type. For the purpose of this paper, we minimize the complexity
        of the gateway query routing in order to emphasize the
        functionality of the Load Balancer. We will require the user to
        send her query to the gateway handle by calling the function
        <fo:inline font-family="Pragmata Pro">userQuery</fo:inline> with a two-item list parameter: the
        required service and the query to be executed. The user
        interacts with the gateway using deferred synchronous messaging.
      </fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        Further information can be found at the Cookbook article on
        <fo:basic-link external-destination="url('http://code.kx.com/q/cookbook/load-balancing/')"><fo:inline color="#0070cd">load
        balancing</fo:inline></fo:basic-link><fo:footnote><fo:inline font-size="8pt" alignment-baseline="hanging">2</fo:inline><fo:footnote-body><fo:block font-size="8pt">2.
									http://code.kx.com/q/cookbook/load-balancing/</fo:block></fo:footnote-body></fo:footnote>.
      </fo:block>
      <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
gw:{h:hopen x;{(neg x)(`userQuery;y);x[]}[h]}[`:localhost:5555]
  // `:localhost:5555 is an example gateway address
gw(`EQUITY_MARKET_RDB;"select from trade where date=max date")
  // Where EQUITY_MARKET_RDB is the name of the required service
</fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        The diagram below outlines the logical steps taken when a user’s
        query enters the system. Results are then returned to the user
        through the gateway. Errors can be returned to users due to an
        invalid service request from the gateway or an error from the
        service on evaluating a user query.
      </fo:block>
<fo:block linefeed-treatment="preserve" line-height="16pt" space-after="9pt" text-align="left">
<fo:external-graphic content-width="scale-down-to-fit" src="url(img/image4.jpeg)" width="100%"/>

<fo:inline font-size="10pt"><fo:inline font-style="italic">Flow diagram of system logic</fo:inline></fo:inline></fo:block>
      <fo:block line-height="16pt" space-after="9pt" text-align="justify">
        Instead of taking a standard round-robin approach to load
        balancing as explained in
        <fo:basic-link external-destination="url('https://code.kx.com/q/wp/common_design_principles_for_kdb_gateways.pdf')"><fo:inline color="#0070cd">
		‘Common
        design principles for kdb+ gateways’
	</fo:inline></fo:basic-link><fo:footnote><fo:inline font-size="8pt" alignment-baseline="hanging">3</fo:inline><fo:footnote-body><fo:block font-size="8pt">3.
									https://code.kx.com/q/wp/common_design_principles_for_kdb_gateways.pdf</fo:block></fo:footnote-body></fo:footnote>, our Load
        Balancer will keep track of what resources are free and allocate
        queries to services only when they are available. After
        executing a query, the service provides a notification to the
        Load Balancer that it is available. The only exception to this
        occurs when a service gets allocated to a query but the user has
        since disconnected from the gateway. Here, the gateway notifies
        the Load Balancer that the service is no longer required.
      </fo:block>
    </fo:block>
  </fo:block>
  <fo:block id="gateways">
    <fo:block id="idm544625705904" font-size="18pt" line-height="22pt" margin-right="36pt" page-break-before="always" space-after="60pt" text-align="left">Gateways</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      When a connection is opened to the Load Balancer, the handle is
      set to the variable <fo:inline font-family="Pragmata Pro">LB</fo:inline>, which will be
      referenced throughout this paper. As asynchronous messages are
      used throughout this framework, we also create the variable
      <fo:inline font-family="Pragmata Pro">NLB</fo:inline>, which is assigned with the negative handle
      to the load balancer.
    </fo:block>
    <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
\p 5555
manageConn:{@[{NLB::neg LB::hopen x};`:localhost:1234;{show x}]}; 
registerGWFunc:{addResource LB(`registerGW;`)};
</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      The gateway connects to the Load Balancer and retrieves the
      addresses of all service resources, establishing a connection to
      each. This is the only time the gateway uses synchronous IPC
      communication to ensure it has all of the details it requires
      before accepting user queries. After the gateway registers itself
      as a subscriber for any new resources that come available, all
      future communication is sent via asynchronous messages.
    </fo:block>
    <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
resources:([address:()] source:();sh:());
addResource:{`resources upsert `address xkey update sh:{hopen first x}'[address] from x};
</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      The gateway process creates and maintains an empty query table.
      The complexity of this table is at the developer’s discretion. In
      this example we’ll record:
    </fo:block>
    <fo:list-block provisional-distance-between-starts="0.3cm" provisional-label-separation="0.15cm"><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Unique sequence number per query (<fo:inline font-family="Pragmata Pro">sq</fo:inline>)
        </fo:block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Handle from user process (<fo:inline font-family="Pragmata Pro">uh</fo:inline>)
        </fo:block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Timestamps for when the query was received, when the query got
          sent to an available resource, and when the query results are
          sent back to the user (<fo:inline font-family="Pragmata Pro">rec</fo:inline>,
          <fo:inline font-family="Pragmata Pro">snt</fo:inline>, <fo:inline font-family="Pragmata Pro">ret</fo:inline> respectively)
        </fo:block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          The user ID (<fo:inline font-family="Pragmata Pro">user</fo:inline>)
        </fo:block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          The service handle (<fo:inline font-family="Pragmata Pro">sh</fo:inline>)
        </fo:block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          The service requested by user (<fo:inline font-family="Pragmata Pro">serv</fo:inline>)
        </fo:block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          The user’s query
        </fo:block>
      </fo:list-item-body></fo:list-item></fo:list-block>
    <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
queryTable:([sq:`int$()];
  uh:`int$();
  rec:`timestamp$();
  snt:`timestamp$();
  ret:`timestamp$();
  user:`$();
  sh:`int$();
  serv:`$();
  query:());
</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      This table could be extended to include more information by making
      small changes to the code in this paper. These fields could
      include the status of a query, error messages received from
      service or the total time a query took from start to end.
    </fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      As mentioned previously, users make requests by calling the
      <fo:inline font-family="Pragmata Pro">userQuery</fo:inline> function on the gateway. This
      function takes a two-item list argument:
      <fo:inline font-family="Pragmata Pro">(Service;Query)</fo:inline>. The gateway will validate the
      existence of a service matching the name passed to
      <fo:inline font-family="Pragmata Pro">userQuery</fo:inline> and send an error if no such resource
      exists. We are setting outside the scope of this paper any further
      request validation, including access permissioning.
    </fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      For further details on access control, please refer to the
      Technical Whitepaper
      <fo:basic-link external-destination="url('http://code.kx.com/q/wp/permissions_with_kdb.pdf')"><fo:inline color="#0070cd">
		‘Permissions
      with kdb+’
	</fo:inline></fo:basic-link><fo:footnote><fo:inline font-size="8pt" alignment-baseline="hanging">4</fo:inline><fo:footnote-body><fo:block font-size="8pt">4.
									http://code.kx.com/q/wp/permissions_with_kdb.pdf</fo:block></fo:footnote-body></fo:footnote>.
    </fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      When a user sends her query via the <fo:inline font-family="Pragmata Pro">userQuery</fo:inline>
      function, we assign the query a unique sequence number and publish
      an asynchronous request to the Load Balancer to be assigned an
      available resource.
    </fo:block>
    <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
userQuery:{
  $[(serv:x 0) in exec distinct source from resources; // Check if valid service
    [queryTable,:(SEQ+:1;.z.w;.z.p;0Np;0Np;.z.u;0N;serv;x 1); 
      NLB(`requestService;SEQ;serv)];
    (neg .z.w)(`$"Service Unavailable")]};
</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      The <fo:inline font-family="Pragmata Pro">addResource</fo:inline> function defined earlier is
      used to add new service instances to the plant, while the
      <fo:inline font-family="Pragmata Pro">serviceAlloc</fo:inline> function is used to pass back an
      allocated resource for a given query sequence number. The query is
      retrieved by its sequence number from
      <fo:inline font-family="Pragmata Pro">queryTable</fo:inline> and sent to the allocated service
      resource. If the user has since disconnected from the gateway
      before a resource could be provided, the gateway informs the Load
      Balancer to make this resource free again by executing the
      <fo:inline font-family="Pragmata Pro">returnService</fo:inline> function in the Load Balancer.
      After each event, the timestamp fields are updated within the
      <fo:inline font-family="Pragmata Pro">queryTable</fo:inline>.
    </fo:block>
    <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
serviceAlloc:{[sq;addr]
  $[null queryTable[sq;`uh];
  // Check if user is still waiting on results
    NLB(`returnService;sq);
  // Service no longer required
    [(neg sh:resources[addr;`sh]) (`queryService;(sq;queryTable[sq;`query]));
  // Send query to allocated resource, update queryTable
      queryTable[sq;`snt`sh]:(.z.p;sh)]]};
</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      When a service returns results to the gateway, the results arrive
      tagged with the same sequence number sent in the original query.
      This incoming message packet executes the
      <fo:inline font-family="Pragmata Pro">returnRes</fo:inline> function, which uses the sequence
      number to identify the user handle and return the results. If the
      user has disconnected before the results can be returned then the
      user handle field <fo:inline font-family="Pragmata Pro">uh</fo:inline> will be set to null
      (through the <fo:inline font-family="Pragmata Pro">.z.pc</fo:inline> trigger) causing nothing
      further to be done.
    </fo:block>
    <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
returnRes:{[res]
  uh:first exec uh from queryTable where sq=(res 0); 
  // (res 0) is the sequence number
  if[not null uh;(neg uh)(res 1)];
  // (res 1) is the result
  queryTable[(res 0);`ret]:.z.p
  };
</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      In the situation where a process disconnects from the gateway,
      <fo:inline font-family="Pragmata Pro">.z.pc</fo:inline> establishes what actions to take. As
      mentioned, a disconnected user will cause
      <fo:inline font-family="Pragmata Pro">queryTable</fo:inline> to be updated with a null user
      handle. If the user currently has no outstanding queries, the
      gateway has nothing to do. If a service disconnects from the
      gateway whilst processing an outstanding user request, then all
      users that have outstanding requests to this database are informed
      and the database is purged from the available
      <fo:inline font-family="Pragmata Pro">resources</fo:inline> table.
    </fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      If our Load Balancer connection has dropped, all users with queued
      queries will be informed. All connections are disconnected and
      purged from the <fo:inline font-family="Pragmata Pro">resources</fo:inline> table. This ensures
      that all new queries will be returned directly to users as the
      Load Balancer is unavailable to respond to their request. A timer
      is set to attempt to reconnect to the Load Balancer. On
      reconnection, the gateway will re-register itself, pull all
      available resources and establish new connections. The
      <fo:inline font-family="Pragmata Pro">.z.ts</fo:inline> trigger is executed once, on script
      startup, to initialize and register the process.
    </fo:block>
    <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
.z.pc:{[handle]
  // if handle is for a user process, set the query handle (uh) as null
  update uh:0N from `queryTable where uh=handle;
  // if handle is for a resource process, remove from resources
    delete from `resources where sh=handle;
  // if any user query is currently being processed on the service which 
  // disconnected, send message to user
  if[count sq:exec distinct sq from queryTable where sh=handle,null ret;
    returnRes’[sq cross `$”Service Disconnect”]]; 
  if[handle~LB; // if handle is Load Balancer
    // Send message to each connected user, which has not received results
    (neg exec uh from queryTable where not null uh,null snt)@\: `$”Service Unavailable”;
    // Close handle to all resources and clear resources table
    hclose each (0!resources)`sh;
    delete from `resources;
    // update queryTable to close outstanding user queries
    update snt:.z.p,ret:.z.p from `queryTable where not null uh,null snt; 
    // reset LB handle and set timer of 10 seconds
    // to try and reconnect to Load Balancer process
    LB::0; NLB::0; value”\\t 10000”]};

.z.ts:{
  manageConn[]; if[0&lt;LB;@[registerGWFunc;`;{show x}];value”\\t 0”]
  }; 

.z.ts[];
</fo:block>
  </fo:block>
  <fo:block id="load-balancer-1">
    <fo:block id="idm544625672592" font-size="18pt" line-height="22pt" margin-right="36pt" page-break-before="always" space-after="60pt" text-align="left">Load Balancer</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      Within our Load Balancer there are two tables and a list:
    </fo:block>
    <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
\p 1234
services:([handle:`int$()]
  address:`$();
  source:`$();
  gwHandle:`int$();
  sq:`in t$();
  udt:`timestamp$());

serviceQueue:([gwHandle:`int$();sq:`int$()]
  source:`$();
  time:`timestamp$()); 

gateways:();
</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      The <fo:inline font-family="Pragmata Pro">service</fo:inline> table maintains all available
      instances/resources of services registered and the gateways
      currently using each service resource. The
      <fo:inline font-family="Pragmata Pro">serviceQueue</fo:inline> maintains a list of requests
      waiting on resources. A list is also maintained, called
      <fo:inline font-family="Pragmata Pro">gateways</fo:inline>, which contains all gateway handles.
    </fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      Gateways connecting to the Load Balancer add their handle to the
      <fo:inline font-family="Pragmata Pro">gateways</fo:inline> list. New service resources add their
      connection details to the <fo:inline font-family="Pragmata Pro">services</fo:inline> table. When
      a service resource registers itself using the
      <fo:inline font-family="Pragmata Pro">registerResource</fo:inline> function, the Load Balancer
      informs all registered gateways of the newly available resource.
      The next outstanding query within the
      <fo:inline font-family="Pragmata Pro">serviceQueue</fo:inline> table is allocated immediately to
      this new resource.
    </fo:block>
    <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
registerGW:{gateways,:.z.w ; select source, address from services};
registerResource:{[name;addr]
  `services upsert (.z.w;addr;name;0N;0N;.z.p);
  (neg gateways)@\:(`addResource;enlist`source`address!(name;addr)); 
  // Sends resource information to all registered gateway handles 
  serviceAvailable[.z.w;name]};
</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      Incoming requests for service allocation arrive with a
      corresponding sequence number. The combination of gateway handle
      and sequence number will always be unique. The
      <fo:inline font-family="Pragmata Pro">requestService</fo:inline> function either provides a
      service to the gateway or adds the request to the
      <fo:inline font-family="Pragmata Pro">serviceQueue</fo:inline>. When a resource is allocated to a
      user query, the resource address is returned to the gateway along
      with the query sequence number that made the initial request.
    </fo:block>
    <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
sendService:{[gw;h]neg[gw]raze(`serviceAlloc;services[h;`sq`address])};
// Returns query sequence number and resource address to gateway handle

requestService:{[seq;serv]
  res:exec first handle from services where source=serv,null gwHandle; 
  // Check if any idle service resources are available
  $[null res;
    addRequestToQueue[seq;serv;.z.w]; 
    [services[res;`gwHandle`sq`udt]:(.z.w;seq;.z.p);
      sendService[.z.w;res]]]};
</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      If all matching resources are busy, then the gateway handle +
      sequence number combination is appended to the
      <fo:inline font-family="Pragmata Pro">serviceQueue</fo:inline> table along with the service
      required.
    </fo:block>
    <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
addRequestToQueue:{[seq;serv;gw]`serviceQueue upsert (gw;seq;serv;.z.p)};
</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      After a service resource has finished processing a request, it
      sends an asynchronous message to the Load Balancer, executing the
      <fo:inline font-family="Pragmata Pro">returnService</fo:inline> function. As mentioned
      previously, if the user disconnects from the gateway prior to
      being allocated a service resource, the gateway also calls this
      function. The incoming handle differentiates between these two
      situations.
    </fo:block>
    <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
returnService:{
  serviceAvailable . $[.z.w in (0!services)`handle;
    (.z.w;x);
    value first select handle,source from services where gwHandle=.z.w,sq=x]
  }
</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      On execution of the <fo:inline font-family="Pragmata Pro">serviceAvailable</fo:inline> function,
      the Load Balancer will either mark this resource as free, or
      allocate the resource to the next gateway + sequence number
      combination that has requested this service, updating the
      <fo:inline font-family="Pragmata Pro">services</fo:inline> and <fo:inline font-family="Pragmata Pro">serviceQueue</fo:inline>
      tables accordingly.
    </fo:block>
    <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
serviceAvailable:{[zw;serv]
  nxt:first n:select gwHandle,sq from serviceQueue where source=serv; 
  serviceQueue::(1#n)_ serviceQueue;
  // Take first request for service and remove from queue 
  services[zw;`gwHandle`sq`udt]:(nxt`gwHandle;nxt`sq;.z.p);
  if[count n;sendService[nxt`gwHandle;zw]]};
</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      Any resource that disconnects from the Load Balancer is removed
      from the <fo:inline font-family="Pragmata Pro">services</fo:inline> table. If a gateway has
      disconnected, it is removed from the resource subscriber list
      <fo:inline font-family="Pragmata Pro">gateways</fo:inline> and all queued queries for any
      resources must also be removed, and the resource freed up for
      other gateways. Unlike other components in this framework, the
      Load Balancer does not attempt to reconnect to processes, as they
      may have permanently been removed from the service pool of
      resources. In a dynamically adjustable system, service resources
      could be added and removed on demand based on the size of the
      <fo:inline font-family="Pragmata Pro">serviceQueue</fo:inline> table.
    </fo:block>
    <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
.z.pc:{[h]
  services _:h;
  gateways::gateways except h;
  delete from `serviceQueue where gwHandle=h;
  update gwHandle:0N from `services where gwHandle=h
  };
</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      If a gateway dies, data services will continue to run queries that
      have already been routed to them, which will not subsequently be
      returned to the client. It is also possible that the next query
      assigned to this resource may experience a delay as the previous
      query is still being evaluated. As mentioned later, all resources
      should begin with a timeout function to limit interruption of
      service.
    </fo:block>
  </fo:block>
  <fo:block id="example-service">
    <fo:block id="idm544625651888" font-size="18pt" line-height="22pt" margin-right="36pt" page-break-before="always" space-after="60pt" text-align="left">Example service</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      The example below takes a simple in-memory database containing
      trade and quote data that users can query. An example timeout of
      ten seconds is assigned, to prevent queries running for too long.
    </fo:block>
    <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
\T 10
\p 2222
LB:0;

quote:([]
  date:10#.z.D-1;
  sym:10#`FDP;
  time:09:30t+00:30t*til 10;
  bid:100.+0.01*til 10;
  ask:101.+0.01*til 10);

trade:([]
  date:10#.z.D-1;
  sym:10#`FDP;
  time:09:30t+00:30t*til 10;
  price:100.+0.01*til 10;
  size:10#100);
</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      Each instance of a service uses the same service name. Within this
      example, the service name is hard-coded, but this would ideally be
      set via a command line parameter. In our example below, our
      service name is set to <fo:inline font-family="Pragmata Pro">`EQUITY_MARKET_RDB</fo:inline>. In
      designing a user-friendly system, service names should be
      carefully set to clearly describe a service’s purpose. Similar
      processes (with either a different port number or running on a
      different host) can be started up with this service name,
      increasing the pool of resources available to users.
    </fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      The <fo:inline font-family="Pragmata Pro">serviceDetails</fo:inline> function is executed on
      connection to the Load Balancer to register each service address.
    </fo:block>
    <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
manageConn:{@[{NLB::neg LB::hopen x};`:localhost:1234;
  {show "Can't connect to Load Balancer-&gt; ",x}]};

serviceName:`EQUITY_MARKET_RDB;

serviceDetails:(`registerResource; 
  serviceName;
  `$":" sv string (();.z.h;system"p"));
</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      When a gateway sends the service a request via the
      <fo:inline font-family="Pragmata Pro">queryService</fo:inline> function, a unique sequence number
      assigned by a given gateway arrives as the first component of the
      incoming asynchronous message. The second component, the query
      itself, is then evaluated. The results of this query is stamped
      with the same original sequence number and returned to the gateway
      handle.
    </fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      As mentioned previously, query interpretation/validation on the
      gateway side is outside of the scope of this paper. Any errors
      that occur due to malformed queries will be returned via protected
      evaluation from database back to the user. In the situation where
      the process query times out, <fo:inline font-family="Pragmata Pro">'stop</fo:inline> will be
      returned to the user via the projection
      <fo:inline font-family="Pragmata Pro">errProj</fo:inline>.
    </fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      On completion of a request, an asynchronous message is sent to the
      Load Balancer informing it that the service is now available for
      the next request.
    </fo:block>
    <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
execRequest:{[nh;rq]nh(`returnRes;(rq 0;@[value;rq 1;{x}]));nh[]};

queryService:{ 
  errProj:{[nh;sq;er]nh(sq;`$er);nh[]}; 
  @[execRequest[neg .z.w];x;errProj[neg .z.w;x 0]]; 
  NLB(`returnService;serviceName)};
</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      Note that in the <fo:inline font-family="Pragmata Pro">execRequest</fo:inline> function,
      <fo:inline font-family="Pragmata Pro">nh</fo:inline> is the asynchronous handle to the gateway.
      Calling <fo:inline font-family="Pragmata Pro">nh[]</fo:inline> after sending the result causes
      the outgoing message queue for this handle to be flushed
      immediately. For more details, see the
      <fo:basic-link external-destination="url('http://code.kx.com/q/cookbook/ipc/')"><fo:inline color="#0070cd">Cookbook article on IPC</fo:inline></fo:basic-link><fo:footnote><fo:inline font-size="8pt" alignment-baseline="hanging">5</fo:inline><fo:footnote-body><fo:block font-size="8pt">5.
									http://code.kx.com/q/cookbook/ipc/</fo:block></fo:footnote-body></fo:footnote>.
    </fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      Like our gateway, the <fo:inline font-family="Pragmata Pro">.z.pc</fo:inline> handle is set to
      reconnect to the Load Balancer on disconnect. The
      <fo:inline font-family="Pragmata Pro">.z.ts</fo:inline> function retries to connect to the Load
      Balancer, and once successful the service registers its details.
      The <fo:inline font-family="Pragmata Pro">.z.ts</fo:inline> function is executed once on start-up
      – like the gateway – to initialize the first connection.
    </fo:block>
    <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
.z.ts:{manageConn[];if[0&lt;LB;@[NLB;serviceDetails;{show x}];value"\\t 0"]}; 
.z.pc:{[handle]if[handle~LB;LB::0;value"\\t 10000"]};
.z.ts[];
</fo:block>
  </fo:block>
  <fo:block id="example-client">
    <fo:block id="idm544625635824" font-size="18pt" line-height="22pt" margin-right="36pt" page-break-before="always" space-after="60pt" text-align="left">Example client</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      An example query from a user may look like the following:
    </fo:block>
    <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
q)gw:{h:hopen x;{(neg x)(`userQuery;y);x[]}[h]}[`:localhost:5555] 
q)gw(`EQUITY_MARKET_RDB;"select from quote")
date       sym time         bid    ask 
-----------------------------------------
2016.01.31 FDP 09:30:00.000 100    101 
2016.01.31 FDP 10:00:00.000 100.01 101.01 
2016.01.31 FDP 10:30:00.000 100.02 101.02 
2016.01.31 FDP 11:00:00.000 100.03 101.03 
..
q)gw(`EQUITY_MARKET_RDB;"select from trade") 
date       sym time         price  size 
--------------------------------------- 
2016.01.31 FDP 09:30:00.000 100    100 
2016.01.31 FDP 10:00:00.000 100.01 100 
2016.01.31 FDP 10:30:00.000 100.02 100 
2016.01.31 FDP 11:00:00.000 100.03 100
..
</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      An example query from a user requesting an invalid service name
      will show the following:
    </fo:block>
    <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
q)gw(`MADE_UP_SERVICE;"select from quote")
`Service Unavailable
</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      All queries for valid data services can then be viewed by looking
      at <fo:inline font-family="Pragmata Pro">queryTable</fo:inline> within the gateway:
    </fo:block>
    <fo:block font-family="Pragmata Pro" font-size="10pt" margin-bottom="12pt" margin-left="10pt" page-break-inside="avoid" white-space="pre">
sq| uh  rec                           snt                            ..
--| ---------------------------------------------------------------- ..
1 | 244 2016.02.16D11:39:20.634490000 2016.02.16D11:39:20.634490000  ..
2 | 244 2016.02.16D11:39:22.994304000 2016.02.16D11:39:22.994304000  ..

ret                           user  sh  serv               ..
---------------------------------------------------------- ..
2016.02.16D11:39:20.634490000 Kevin 464 EQUITY_MARKET_RDB  ..
2016.02.16D11:39:22.994304000 Kevin 464 EQUITY_MARKET_RDB  ..

query
-------------------
"select from quote"
"select from trade"
</fo:block>
  </fo:block>
  <fo:block id="conclusion">
    <fo:block id="idm544625629856" font-size="18pt" line-height="22pt" margin-right="36pt" page-break-before="always" space-after="60pt" text-align="left">Conclusion</fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      This paper has presented an approach to building a kdb+ framework
      for query routing and load balancing. Within this example we’ve
      achieved the following:
    </fo:block>
    <fo:list-block provisional-distance-between-starts="0.3cm" provisional-label-separation="0.15cm"><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          A minimal IPC hop architecture for users to retrieve results
          from a network distributed set of databases
        </fo:block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Service provision with an aim to reduce waiting time of
          gateways and users.
        </fo:block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Plant connection stability including smooth additions of new
          resources to help deal with query queue and methods for
          recovering due to a process drop within the plant.
        </fo:block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Error tracking through protected evaluation.
        </fo:block>
      </fo:list-item-body></fo:list-item><fo:list-item><fo:list-item-label end-indent="label-end()"><fo:block line-height="16pt">•</fo:block></fo:list-item-label><fo:list-item-body start-indent="body-start()">
        <fo:block line-height="16pt" space-after="9pt" text-align="justify">
          Enforced asynchronous communication between processes to
          prevent blocking.
        </fo:block>
      </fo:list-item-body></fo:list-item></fo:list-block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      As an example framework focused on network routing, this paper
      covers much of the core functionality, but the scope of this paper
      does not encompass some desirable production features a system
      architect should consider, such as permissions, query validation
      and capacity management. Where topics haven’t been covered
      previously, the Kx Technical Whitepaper series will continue to
      drill down on important components that provide the building
      blocks for a stable, scalable, protected and efficient kdb+
      system.
    </fo:block>
    <fo:block line-height="16pt" space-after="9pt" text-align="justify">
      All tests were run using kdb+ version 3.3 (2015.11.03)
    </fo:block>
  </fo:block>
</fo:block></fo:flow></fo:page-sequence></fo:root>
